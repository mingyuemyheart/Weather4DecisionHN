package com.android.lib.util;import java.io.BufferedWriter;import java.io.File;import java.io.FileNotFoundException;import java.io.FileWriter;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.text.SimpleDateFormat;import java.util.Date;import android.util.Log;/** *  * 类描述：日志打印工具类 * <p> * 创建人：Kevin Lynn * <p> * 创建时间：2013-1-5 下午4:47:41   * <p>      * 修改备注：     * <p> * @version 1.0 * @since 1.0 */public final class LogUtil {	public static boolean DEBUG = true;		private LogUtil() {	}		/**	 * 	 * @param obj	 * @param msg	 */	public static void e(Object obj, String msg) {		if (DEBUG) {			Log.e(obj.getClass().getSimpleName(), msg);		}	}		/**	 * 	 * @param obj	 * @param msg	 */	public static void i(Object obj, String msg) {		if (DEBUG) {			Log.i(obj.getClass().getSimpleName(), msg);		}	}		/**	 * 	 * 	 * @param obj	 * @param msg	 */	public static void d(Object obj, String msg) {		if (DEBUG) {			Log.d(obj.getClass().getSimpleName(), msg);		}	}		/**	 * 	 * 	 * @param obj	 * @param msg	 */	public static void w(Object obj, String msg) {		if (DEBUG) {			Log.w(obj.getClass().getSimpleName(), msg);		}	}		/**	 * 	 * 	 * @param obj	 * @param msg	 */	public static void v(Object obj, String msg) {		if (DEBUG) {			Log.v(obj.getClass().getSimpleName(), msg);		}	}		public static void f(Object obj, String msg) {		f(obj.getClass().getSimpleName(), msg);	}		public static void f(String tag, String msg) {		String path = "/sdcard/log.txt";		File file = new File(path);		if (!file.exists()) {			try {				file.createNewFile();			} catch (IOException e) {				LogUtil.e(new LogUtil(), e.toString());			}		}		BufferedWriter writer = null;		try {			writer = new BufferedWriter(new FileWriter(path, true));			writer.append("[" + time() + " - " + tag + "]" + msg);			writer.newLine();		} catch (FileNotFoundException e) {			e(new LogUtil(), e.toString());		} catch (UnsupportedEncodingException e) {			e(new LogUtil(), e.toString());		} catch (IOException e) {			e(new LogUtil(), e.toString());		} finally {			try {				if (writer != null) {					writer.flush();					writer.close();				}			} catch (Exception e) {				e(new LogUtil(), e.toString());			}		}	}		public static void f(String path, String msg, boolean override) {		File file = new File(path);		if (!file.exists()) {			try {				file.createNewFile();			} catch (IOException e) {				LogUtil.e(new LogUtil(), e.toString());			}		}		BufferedWriter writer = null;		try {			writer = new BufferedWriter(new FileWriter(path, override));			writer.append(msg);			writer.newLine();		} catch (FileNotFoundException e) {			e(new LogUtil(), e.toString());		} catch (UnsupportedEncodingException e) {			e(new LogUtil(), e.toString());		} catch (IOException e) {			e(new LogUtil(), e.toString());		} finally {			try {				if (writer != null) {					writer.flush();					writer.close();				}			} catch (Exception e) {				e(new LogUtil(), e.toString());			}		}	}		private static String time() {		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");		Date date = new Date(System.currentTimeMillis());		return format.format(date);	}}