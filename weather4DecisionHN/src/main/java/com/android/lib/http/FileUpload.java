package com.android.lib.http;import java.io.BufferedReader;import java.io.ByteArrayOutputStream;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import android.util.Log;/** * 类描述：文件上传工具 * <p> * 创建人：Lynn * <p> * 创建时间：2013-1-18 下午5:06:39   * <p>      * 修改备注：     * <p> * @version 1.0 * @since 1.0  */public class FileUpload {	private final static String TAG      = "FileUpload";	private final static int    TIME_OUT = 20000;	private HttpURLConnection   conn     = null;	private String              uploadUrl;	private File                file;	private boolean             cancel;		/**	 * 构造函数	 *    	 * @param path 文件路径	 * @param uploadUrl 接口地址	 */	public FileUpload(String path, String uploadUrl) {		this(new File(path), uploadUrl);	}		/**	 * 构造函数	 *    	 * @param file 文件对象	 * @param uploadUrl 接口地址	 */	public FileUpload(File file, String uploadUrl) {		if (file != null) {			this.file = file;		}		this.uploadUrl = uploadUrl;	}		/**	 * 开始上传	 * 	 * @param formName 表单名称	 * @return 响应结果，如果取消的话，返回结果为字符串“cancel”	 */	public String upload(String formName) {		StringBuffer result = null;		BufferedReader buffered = null;		try {			conn = (HttpURLConnection) new URL(uploadUrl).openConnection();			conn.setRequestMethod("POST");			conn.setRequestProperty("User-Agent", "Android");			conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");			conn.setConnectTimeout(TIME_OUT);			conn.setReadTimeout(TIME_OUT);			conn.setDoOutput(true);			conn.setDoInput(true);						String BOUNDARY = "--------------";			String MULTIPART_FORM_DATA = "multipart/form-data";			conn.setRequestProperty("Content-Type", MULTIPART_FORM_DATA + ";boundary=" + BOUNDARY);			DataOutputStream outStream = new DataOutputStream(conn.getOutputStream());			byte[] content = getBytesFromFile(file);			if (content == null) {				return "the file is not exist";			}			StringBuilder split = new StringBuilder();			split.append("--");			split.append(BOUNDARY);			split.append("\r\n");			split.append("Content-Disposition: form-data;name=\"" + formName + "\";filename=\"" + file.getName() + "\"\r\n");			split.append("Content-Type: application/octet-stream; charset=UTF-8\r\n");			split.append("Content-Transfer-Encoding: binary" + "\r\n\r\n");			outStream.write(split.toString().getBytes("UTF-8"));			outStream.write(content, 0, content.length);			outStream.write("\r\n".getBytes());			byte[] end_data = ("--" + BOUNDARY + "--\r\n").getBytes();			outStream.write(end_data);			outStream.flush();			outStream.close();						result = new StringBuffer();			int code = conn.getResponseCode();			if (code == 200) {				buffered = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));				String readData = null;				while ((readData = buffered.readLine()) != null) {					result.append(readData);				}			}		} catch (MalformedURLException e1) {			Log.e(TAG, e1.toString());		} catch (UnsupportedEncodingException e2) {			Log.e(TAG, e2.toString());		} catch (IOException e3) {			Log.e(TAG, e3.toString());		} finally {			try {				if (buffered != null) {					buffered.close();				}			} catch (IOException e) {				Log.e(TAG, e.toString());			}			if (conn != null) {				conn.disconnect();				conn = null;			}		}		if (cancel) {			result = new StringBuffer();			result.append("cancel");		}		return result.toString();	}		/**	 * 取消上传	 */	public void cancel() {		try {			cancel = true;			if (conn != null) {				conn.disconnect();				conn = null;			}		} catch (Exception e) {			Log.d(TAG, e.toString());		}	}		/**	 * 文件转化为字节数组	 * 	 * @param file 文件对象	 * @return byte[]	 */	public static byte[] getBytesFromFile(File file) {		byte[] data = null;		try {			if (null == file || !file.exists()) {				return null;			}			FileInputStream in = new FileInputStream(file);			ByteArrayOutputStream out = new ByteArrayOutputStream(4096);			byte[] buf = new byte[4096];			int n;			while ((n = in.read(buf)) != -1) {				out.write(buf, 0, n);			}			in.close();			out.close();			data = out.toByteArray();		} catch (IOException e) {			Log.e(TAG, "get bytes from file process error!");		}		return data;	}}